AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Image Processing Pipeline

Parameters:
  BucketName:
    Type: String
    Default: image-upload-bucket-debitosh

Resources:
  # 1. S3 Bucket for Image Uploads
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
            Function: !GetAtt ImageProcessor.Arn

  # 2. IAM Role for API Gateway Logging
  APIGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # 3. Link Role to API Gateway Account
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayCloudWatchRole.Arn

  # 4. Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AndLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # 5. Lambda Function
  ImageProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ImageProcessor
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 30
      MemorySize: 1536
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          from PIL import Image, ImageFilter
          import io
          import logging
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  logger.info(f"Processing event: {event}")
                  
                  # Handle both S3 triggers and API calls
                  if 'Records' in event:  # S3 Trigger
                      record = event['Records'][0]
                      bucket = record['s3']['bucket']['name']
                      key = record['s3']['object']['key']
                      operation = 'grayscale'
                  else:  # API Gateway
                      if 'body' in event:
                          body = json.loads(event['body'])
                          bucket = body['bucket']
                          key = body['key']
                          operation = body.get('operation', 'grayscale')
                      else:
                          bucket = event['bucket']
                          key = event['key']
                          operation = event.get('operation', 'grayscale')
                  
                  # Download image
                  image_obj = s3.get_object(Bucket=bucket, Key=key)
                  image_data = image_obj['Body'].read()
                  
                  # Process with Pillow
                  with Image.open(io.BytesIO(image_data)) as img:
                      if operation == 'grayscale':
                          img = img.convert('L')
                      elif operation == 'watercolor':
                          img = img.filter(ImageFilter.CONTOUR)
                      elif operation == 'sketch':
                          img = img.filter(ImageFilter.EDGE_ENHANCE_MORE)
                      elif operation == 'resize':
                          width = int(event.get('width', body.get('width', 100)))
                          height = int(event.get('height', body.get('height', 100)))
                          img = img.resize((width, height))
                      
                      # Save to buffer
                      buffer = io.BytesIO()
                      img.save(buffer, format='JPEG', quality=90)
                      buffer.seek(0)
                      
                      # Upload processed image
                      new_key = f"processed/{key.split('/')[-1]}"
                      s3.put_object(
                          Bucket=bucket,
                          Key=new_key,
                          Body=buffer,
                          ContentType='image/jpeg'
                      )
                      
                      return {
                          'statusCode': 200,
                          'body': json.dumps({
                              'message': 'Processed successfully',
                              'output_path': f"s3://{bucket}/{new_key}"
                          })
                      }
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

  # 6. API Gateway
  ImageAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ImageProcessingAPI
      Description: API for image transformations

   # 7. API Gateway
  ImageAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ImageProcessingAPI
      Description: API for image transformations

 # 8. API Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ImageAPI
      ParentId: !GetAtt ImageAPI.RootResourceId
      PathPart: process

 # 9. API Method (POST)
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageAPI
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImageProcessor.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"


 # 10. API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref ImageAPI
      StageName: prod

  # 11. Lambda Permission for API Gateway
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ImageProcessor.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ImageAPI}/*/POST/process"

  # 12. S3 Trigger Permission
  S3TriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ImageProcessor.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"

Outputs:
  ApiEndpoint:
    Description: API Gateway Endpoint URL
    Value: !Sub "https://${ImageAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/process"
  S3BucketName:
    Description: Upload bucket name
    Value: !Ref ImageBucket